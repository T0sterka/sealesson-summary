import telebot
import requests
import hashlib
import base64  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from telebot import types
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.backends import default_backend
import secrets
import string
import requests
import hashlib

def check_password_leak(password):
    sha1_password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    prefix, suffix = sha1_password[:5], sha1_password[5:]
    
    url = f"https://api.pwnedpasswords.com/range/{prefix}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        
        for line in response.text.splitlines():
            parts = line.split(':')
            if parts[0] == suffix:
                return int(parts[1])
        return 0
    except requests.RequestException:
        return -1

def check_email_leak(email, api_key):
    headers = {"hibp-api-key": api_key}
    url = f"https://haveibeenpwned.com/api/v3/breachedaccount/{email}"
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 404:
            return []
        response.raise_for_status()
        return response.json()
    except requests.RequestException:
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot('7514486365:AAE5R7whBl37aeIMVtya8Zr4GdLQE37aw6s')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserSession:
    def __init__(self):
        self.aes_key = None  # –ö–ª—é—á –¥–ª—è AES-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        self.rsa_private_key = None  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á RSA
        self.rsa_public_key = None  # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á RSA
        self.current_action = None  # –¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# ====================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ======================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES')
    btn2 = types.KeyboardButton('üîë –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ RSA')
    btn3 = types.KeyboardButton('üî¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π')
    btn4 = types.KeyboardButton('‚ö† –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫')
    markup.add(btn1, btn2, btn3, btn4)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç-–®–∏—Ñ—Ä–æ–≤–∞–ª—å—â–∏–∫!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=markup
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if message.chat.id not in user_sessions:
        user_sessions[message.chat.id] = UserSession()

# ====================== –®–ò–§–†–û–í–ê–ù–ò–ï AES ======================

@bot.message_handler(func=lambda message: message.text == 'üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES')
def aes_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (AES)')
    btn2 = types.KeyboardButton('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (AES)')
    btn3 = types.KeyboardButton('‚Ü© –ù–∞–∑–∞–¥')
    markup.add(btn1, btn2, btn3)
    
    bot.send_message(
        message.chat.id,
        "üîê –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å AES-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (AES)')
def encrypt_aes_start(message):
    user_sessions[message.chat.id].current_action = 'encrypt_aes'
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda message: message.text == 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (AES)')
def decrypt_aes_start(message):
    user_sessions[message.chat.id].current_action = 'decrypt_aes'
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª—é—á —á–µ—Ä–µ–∑ '|' (—Ç–µ–∫—Å—Ç|–∫–ª—é—á):",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda message: user_sessions.get(message.chat.id) and 
                    user_sessions[message.chat.id].current_action in ['encrypt_aes', 'decrypt_aes'])
def handle_aes(message):
    session = user_sessions[message.chat.id]
    
    if session.current_action == 'encrypt_aes':
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not session.aes_key:
            session.aes_key = Fernet.generate_key().decode()
        
        # –®–∏—Ñ—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        fernet = Fernet(session.aes_key.encode())
        encrypted = fernet.encrypt(message.text.encode()).decode()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.send_message(
            message.chat.id,
            f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<code>{encrypted}</code>\n\n"
            f"üîë –ö–ª—é—á (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ!):\n<code>{session.aes_key}</code>",
            parse_mode='HTML'
        )
        
    elif session.current_action == 'decrypt_aes':
        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª—é—á
            parts = message.text.split('|')
            if len(parts) != 2:
                raise ValueError
            
            text, key = parts[0].strip(), parts[1].strip()
            
            # –î–µ—à–∏—Ñ—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            fernet = Fernet(key.encode())
            decrypted = fernet.decrypt(text.encode()).decode()
            
            bot.send_message(
                message.chat.id,
                f"üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<code>{decrypted}</code>",
                parse_mode='HTML'
            )
        except Exception as e:
            bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –∏ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç|–∫–ª—é—á)."
            )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    session.current_action = None
    send_welcome(message)

# ====================== –®–ò–§–†–û–í–ê–ù–ò–ï RSA ======================

@bot.message_handler(func=lambda message: message.text == 'üîë –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ RSA')
def rsa_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ RSA')
    btn2 = types.KeyboardButton('üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (RSA)')
    btn3 = types.KeyboardButton('üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (RSA)')
    btn4 = types.KeyboardButton('‚Ü© –ù–∞–∑–∞–¥')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(
        message.chat.id,
        "üîë –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å RSA-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ RSA')
def generate_rsa_keys(message):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—É –∫–ª—é—á–µ–π
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    
    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–∏
    private_pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    ).decode()
    
    public_pem = private_key.public_key().public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    ).decode()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
    session = user_sessions[message.chat.id]
    session.rsa_private_key = private_pem
    session.rsa_public_key = public_pem
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        message.chat.id,
        "üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ!):\n"
        f"<code>{private_pem}</code>\n\n"
        "üîê –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á:\n"
        f"<code>{public_pem}</code>",
        parse_mode='HTML'
    )

@bot.message_handler(func=lambda message: message.text == 'üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (RSA)')
def encrypt_rsa_start(message):
    user_sessions[message.chat.id].current_action = 'encrypt_rsa'
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ '|' (—Ç–µ–∫—Å—Ç|–∫–ª—é—á):",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda message: message.text == 'üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (RSA)')
def decrypt_rsa_start(message):
    user_sessions[message.chat.id].current_action = 'decrypt_rsa'
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —á–µ—Ä–µ–∑ '|' (—Ç–µ–∫—Å—Ç|–∫–ª—é—á):",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda message: user_sessions.get(message.chat.id) and 
                    user_sessions[message.chat.id].current_action in ['encrypt_rsa', 'decrypt_rsa'])
def handle_rsa(message):
    session = user_sessions[message.chat.id]
    
    try:
        parts = message.text.split('|')
        if len(parts) != 2:
            raise ValueError
        
        text, key = parts[0].strip(), parts[1].strip()
        
        if session.current_action == 'encrypt_rsa':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
            public_key = serialization.load_pem_public_key(
                key.encode(),
                backend=default_backend()
            )
            
            # –®–∏—Ñ—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            encrypted = public_key.encrypt(
                text.encode(),
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA256()),
                    algorithm=hashes.SHA256(),
                    label=None
                )
            )
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            encrypted_b64 = base64.b64encode(encrypted).decode()
            
            bot.send_message(
                message.chat.id,
                f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<code>{encrypted_b64}</code>",
                parse_mode='HTML'
            )
            
        elif session.current_action == 'decrypt_rsa':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
            private_key = serialization.load_pem_private_key(
                key.encode(),
                password=None,
                backend=default_backend()
            )
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ base64
            encrypted = base64.b64decode(text.encode())
            
            # –î–µ—à–∏—Ñ—Ä—É–µ–º
            decrypted = private_key.decrypt(
                encrypted,
                padding.OAEP(
                    mgf=padding.MGF1(algorithm=hashes.SHA256()),
                    algorithm=hashes.SHA256(),
                    label=None
                )
            ).decode()
            
            bot.send_message(
                message.chat.id,
                f"üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<code>{decrypted}</code>",
                parse_mode='HTML'
            )
    
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –∫–ª—é—á–∏."
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    session.current_action = None
    send_welcome(message)

# ====================== –ì–ï–ù–ï–†–ê–¢–û–† –ü–ê–†–û–õ–ï–ô ======================

@bot.message_handler(func=lambda message: message.text == 'üî¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π')
def password_generator(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å (8 —Å–∏–º–≤–æ–ª–æ–≤)')
    btn2 = types.KeyboardButton('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å (12 —Å–∏–º–≤–æ–ª–æ–≤)')
    btn3 = types.KeyboardButton('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (16 —Å–∏–º–≤–æ–ª–æ–≤)')
    btn4 = types.KeyboardButton('‚Ü© –ù–∞–∑–∞–¥')
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(
        message.chat.id,
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text.startswith('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'))
def generate_password(message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è
    if '–ø—Ä–æ—Å—Ç–æ–π' in message.text:
        length = 8
    elif '—Å—Ä–µ–¥–Ω–∏–π' in message.text:
        length = 12
    else:
        length = 16
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    characters = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(secrets.choice(characters) for _ in range(length))
    
    bot.send_message(
        message.chat.id,
        f"üî¢ –í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n<code>{password}</code>\n\n"
        "‚ö† –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö!",
        parse_mode='HTML'
    )

# ====================== –ü–†–û–í–ï–†–ö–ê –£–¢–ï–ß–ï–ö ======================

@bot.message_handler(func=lambda message: message.text == '‚ö† –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–µ–∫')
def check_leaks(message):
    user_sessions[message.chat.id].current_action = 'check_leaks'
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–µ—á–µ–∫:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda message: user_sessions.get(message.chat.id) and 
                    user_sessions[message.chat.id].current_action == 'check_leaks')
def handle_leak_check(message):
    user_input = message.text.strip()
    HIBP_API_KEY = "–≤–∞—à_api_–∫–ª—é—á"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á!
    
    if '@' not in user_input:
        count = check_password_leak(user_input)
        if count == -1:
            bot.reply_to(message, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif count == 0:
            bot.reply_to(message, "‚úÖ –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö!")
        else:
            bot.reply_to(message, f"üö® –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ {count} —É—Ç–µ—á–∫–∞—Ö! –°—Ä–æ—á–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –µ–≥–æ!")
    else:
        leaks = check_email_leak(user_input, HIBP_API_KEY)
        if leaks is None:
            bot.reply_to(message, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email.")
        elif not leaks:
            bot.reply_to(message, f"‚úÖ Email {user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É—Ç–µ—á–∫–∞—Ö!")
        else:
            breaches = "\n".join([f"- {b['Name']} ({b['BreachDate']})" for b in leaks])
            bot.reply_to(message, f"üö® Email –≤ {len(leaks)} —É—Ç–µ—á–∫–∞—Ö:\n{breaches}")
    
    user_sessions[message.chat.id].current_action = None

# ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======================

@bot.message_handler(func=lambda message: message.text == '‚Ü© –ù–∞–∑–∞–¥')
def back_to_main(message):
    send_welcome(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)